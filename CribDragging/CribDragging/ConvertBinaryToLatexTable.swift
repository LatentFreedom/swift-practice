import Foundation

////////////////////////////////////////////////////////////////////
////////////////// INPUTS //////////////////////////////////////////
////////////////////////////////////////////////////////////////////

let ciphertextBinary

let ciphertextBinary

let xorMessageBinary

////////////////////////////////////////////////////////////////////
////////////////// latexTableFormatForArray ////////////////////////
////////////////////////////////////////////////////////////////////

// convert binary array of single characters into format for latex tabular
func latexTableFormatForArray(anArray : [String], length : Int) -> String {
    var formattedMessage : String = String()
    
    var space = 0
    for i in 0..<length {
        
        if ((i % 4 == 0) && (i != 0)) {
            if space == 15 {
                formattedMessage += " \\\\ \n\(anArray[i])"
                space = 0
            }
            else {
                formattedMessage += " & \(anArray[i])"
                space += 1
            }
        }
        else {
            formattedMessage += anArray[i]
        }
    }
    return formattedMessage
}

////////////////////////////////////////////////////////////////////
////////////////// convertStringToArrayOfCharacters ////////////////
////////////////////////////////////////////////////////////////////

func convertStringToArrayOfCharacters(aString : String) -> [String] {
    var anArray : [String] = Array()
    
    for c in aString.characters {
        anArray.append(String(c))
    }
    
    return anArray
}


////////////////////////////////////////////////////////////////////
////////////////// Code starts here  ///////////////////////////////
////////////////////////////////////////////////////////////////////

//let ciphertextArray1 : [String] = convertStringToArrayOfCharacters(ciphertextBinary1)
//let ciphertextArray2 : [String] = convertStringToArrayOfCharacters(ciphertextBinary2)
let xorMessageArray : [String] = convertStringToArrayOfCharacters(xorMessageBinary)

let latex : String = latexTableFormatForArray(xorMessageArray, length: xorMessageArray.count)

print(latex + "\\\\")
