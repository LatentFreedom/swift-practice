//
//  main.swift
//  CribDragging
//
//  Created by Nick Palumbo on 3/31/16.
//  Copyright Â© 2016 Nick Palumbo. All rights reserved.
//

import Foundation

let mostCommonWords :[String] = ["the" , "be", "to", "of"]

////////////////////////////////////////////////////////////////////
/////////////// INPUTS /////////////////////////////////////////////
////////////////////////////////////////////////////////////////////

let cribAsciiString = "the"
let s = 1008 // startBit
let e = 1048 // endBit

let xorBinaryString

let inputHex

let inputHex

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

func main() {
    
    // create array of characters for crib string
    let cribBinaryArray : [String] = CreateCribBinaryArrayOfCharacters(cribAsciiString)
    
    // create array of characters for XOR string
    let xorArrayOfCharacters : [String] = CreateXorBinaryArrayOfCharacters(xorBinaryString, cribBinaryLength: cribBinaryArray.count)

    // drag crib through xor array
    cribDragx2nBits(xorArrayOfCharacters, cribBinaryCharacterArray: cribBinaryArray)
    print("Found \(stringCounter) strings.")
    
    dragFromBitToBit(cribBinaryArray, xorBinaryArray: xorArrayOfCharacters, startBit: s, endBit: e + cribBinaryArray.count)
}

func dragFromBitToBit(cribBinaryArray : [String], xorBinaryArray : [String], startBit : Int, endBit : Int) {
    
    
    let cribLength : Int = cribBinaryArray.count
    
    var xorToBeDragged : [String] = Array()
    var hexResult : String = String()
    var hexResultArray : [String] = Array()
    var asciiResult : String = String()
        
    // create single character array of xor binary part to be xored with crib binary
    for n in startBit..<startBit+cribLength {
        xorToBeDragged.append(xorBinaryArray[n])
    }
        
    let result : String = XorTwoBinaryArraysOfCharacters(xorToBeDragged, binaryArray2: cribBinaryArray, length: cribLength)
    
    let resultArray4LengthBinaryStrings : [String] = StringToArrayOfNStrings(result, length: 4)
    for s in resultArray4LengthBinaryStrings {
        hexResult += BinaryToHex(String(s))
    }
    
    hexResultArray = StringToArrayOfNStrings(hexResult, length: 2)
    
    for s in hexResultArray {
        asciiResult += HexToAscii(s)
    }
    
    if !(asciiResult.containsString("_")) {
        stringCounter += 1
        print(asciiResult)
    }
    else {
        print(asciiResult)
    }
}

main()

//ReplaceBinarySectionWithStringOfAscii(xorBinaryString, asciiString: cribAsciiString, startBit: 2104, endBit: 2144)